@article{haskell_optimisations_1997,
author = {Peyton Jones, Simon and Santos, Andre},
title = {A transformation-based optimiser for Haskell},
year = {1997},
month = {October},
abstract = {Many compilers do some of their work by means of correctness-preserving, and hopefully performance-improving, program transformations. The Glasgow Haskell Compiler (GHC) takes this idea of "compilation by transformation" as its war-cry, trying to express as much as possible of the compilation process in the form of program transformations.

This paper reports on our practical experience of the transformational approach to compilation, in the context of a substantial compiler.


This is a journal version of "Compilation by program transformation: a report from the trenches" (ESOP'96)},
url = {https://www.microsoft.com/en-us/research/publication/a-transformation-based-optimiser-for-haskell/},
journal = {Science of Computer Programming},
volume = {32},
number = {1}
}


@article{WADLER1990231,
title = {Deforestation: transforming programs to eliminate trees},
journal = {Theoretical Computer Science},
volume = {73},
number = {2},
pages = {231-248},
year = {1990},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(90)90147-A},
url = {https://www.sciencedirect.com/science/article/pii/030439759090147A},
author = {Philip Wadler},
abstract = {An algorithm that transforms programs to eliminate intermediate trees is presented. The algorithm applies to any term containing only functions with definitions in a given syntactic form, and is suitable for incorporation in an optimizing compiler.}
}

@article{inspection_testing,
       author = {{Breitner}, Joachim},
        title = "{A promise checked is a promise kept: Inspection Testing}",
      journal = {arXiv e-prints},
     keywords = {Computer Science - Programming Languages},
         year = 2018,
        month = mar,
          eid = {arXiv:1803.07130},
        pages = {arXiv:1803.07130},
archivePrefix = {arXiv},
       eprint = {1803.07130},
 primaryClass = {cs.PL},
       adsurl = {https://ui.adsabs.harvard.edu/abs/2018arXiv180307130B},
      adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@book{implementing_fl,
author = {Peyton Jones, Simon},
title = {The Implementation of Functional Programming Languages},
year = {1987},
month = {January},
abstract = {My 1987 book is now out of print, but it is available here in its entirety in PDF form, in one of two formats:

 	single-page portrait
 	double-page landscape

Both are fully searchable, thanks to OCR and Norman Ramsey.

Errata

 	Section 5.2.4, p87.Â  We need an extra rule

match us [] E = E
This accounts for the possibility that in the constructor rule (Section 5.2.4) there may be some non-nullary constructors for which there are no equations.


 	P168, line 2, "VAR" should be "TVAR".},
publisher = {Prentice Hall},
url = {https://www.microsoft.com/en-us/research/publication/the-implementation-of-functional-programming-languages/},
}

@misc{ghc_dump, 
    author = {Ben Gamari},
    title = {ghc-dump: https://github.com/bgamari/ghc-dump},
    year = 2019,
    url = {https://github.com/bgamari/ghc-dump},
    urldate = {2022-04-08}
}
